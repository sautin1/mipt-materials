// ID(The){0,3}  ID(classes){0,10}  ID(are){0,13}  ID(basically){0,22}  ID(the){0,25}  ID(same){0,29}  ID(as){0,31}  ID(the){0,34}  ID(BinaryTree){0,44}  
// ID(file){1,4}  ID(except){1,10}  ID(the){1,13}  ID(visitor){1,20}  ID(classes){1,27}  ID(and){1,30}  ID(the){1,33}  ID(accept){1,39}  ID(method){1,45} 
// ID(in){2,2}  ID(the){2,5}  ID(Tree){2,9}  CLASS{2,14} 

CLASS{4,5}  ID(TreeVisitor){4,16} {
    PUBLIC{5,6}  STATIC{5,12}  VOID{5,16}  MAIN{5,20} (STRING{5,26} [] ID(a){5,27} ){
	SYSTEM.OUT.PRINTLN{6,19} (NEW{6,22}  ID(TV){6,24} ().ID(Start){6,29} ());
    }
}

CLASS{10,5}  ID(TV){10,7}  {

    PUBLIC{12,6}  INT{12,9}  ID(Start){12,14} (){
	ID(Tree){13,5}  ID(root){13,9}  ;
	BOOLEAN{14,8}  ID(ntb){14,11}  ;
	INT{15,4}  ID(nti){15,7}  ;
	ID(MyVisitor){16,10}  ID(v){16,11}  ;

	ID(root){18,5}  = NEW{18,8}  ID(Tree){18,12} ();
	ID(ntb){19,4}  = ID(root){19,8} .ID(Init){19,12} (INT(16){19,14} );
	ID(ntb){20,4}  = ID(root){20,8} .ID(Print){20,13} ();
	SYSTEM.OUT.PRINTLN{21,19} (INT(100000000){21,28} );
	ID(ntb){22,4}  = ID(root){22,8} .ID(Insert){22,14} (INT(8){22,15} ) ;
	ID(ntb){23,4}  = ID(root){23,8} .ID(Insert){23,14} (INT(24){23,16} ) ;
	ID(ntb){24,4}  = ID(root){24,8} .ID(Insert){24,14} (INT(4){24,15} ) ;
	ID(ntb){25,4}  = ID(root){25,8} .ID(Insert){25,14} (INT(12){25,16} ) ;
	ID(ntb){26,4}  = ID(root){26,8} .ID(Insert){26,14} (INT(20){26,16} ) ;
	ID(ntb){27,4}  = ID(root){27,8} .ID(Insert){27,14} (INT(28){27,16} ) ;
	ID(ntb){28,4}  = ID(root){28,8} .ID(Insert){28,14} (INT(14){28,16} ) ;
	ID(ntb){29,4}  = ID(root){29,8} .ID(Print){29,13} ();
	SYSTEM.OUT.PRINTLN{30,19} (INT(100000000){30,28} );
	ID(v){31,2}  = NEW{31,5}  ID(MyVisitor){31,14} ();
	SYSTEM.OUT.PRINTLN{32,19} (INT(50000000){32,27} );
	ID(nti){33,4}  = ID(root){33,8} .ID(accept){33,14} (ID(v){33,15} );
	SYSTEM.OUT.PRINTLN{34,19} (INT(100000000){34,28} );
	SYSTEM.OUT.PRINTLN{35,19} (ID(root){35,23} .ID(Search){35,29} (INT(24){35,31} ));
	SYSTEM.OUT.PRINTLN{36,19} (ID(root){36,23} .ID(Search){36,29} (INT(12){36,31} ));
	SYSTEM.OUT.PRINTLN{37,19} (ID(root){37,23} .ID(Search){37,29} (INT(16){37,31} ));
	SYSTEM.OUT.PRINTLN{38,19} (ID(root){38,23} .ID(Search){38,29} (INT(50){38,31} ));
	SYSTEM.OUT.PRINTLN{39,19} (ID(root){39,23} .ID(Search){39,29} (INT(12){39,31} ));
	ID(ntb){40,4}  = ID(root){40,8} .ID(Delete){40,14} (INT(12){40,16} );
	ID(ntb){41,4}  = ID(root){41,8} .ID(Print){41,13} ();
	SYSTEM.OUT.PRINTLN{42,19} (ID(root){42,23} .ID(Search){42,29} (INT(12){42,31} ));

	RETURN{44,7}  INT(0){44,8}  ;
    }

}


CLASS{50,5}  ID(Tree){50,9} {
    ID(Tree){51,4}  ID(left){51,8}  ;
    ID(Tree){52,4}  ID(right){52,9} ;
    INT{53,3}  ID(key){53,6}  ;
    BOOLEAN{54,7}  ID(has_left){54,15}  ;
    BOOLEAN{55,7}  ID(has_right){55,16}  ;
    ID(Tree){56,4}  ID(my_null){56,11}  ;



    //ID(Tree){60,4}  ID(new_node){60,12}  ;
    //ID(Tree){61,4}  ID(current_node){61,16}  ;
    //ID(Tree){62,4}  ID(parent_node){62,15}  ;
    
   // BOOLEAN{64,7}  ID(ntb){64,10}  ;
    //BOOLEAN{65,7}  ID(cont){65,11}  ;
    //BOOLEAN{66,7}  ID(found){66,12}  ;
    //INT{67,3}  ID(ifound){67,9}  ;
  //  BOOLEAN{68,7}  ID(is_root){68,14}  ;
  //  INT{69,3}      ID(nti){69,6}  ;
  //  INT{70,3}  ID(key_aux){70,10}  ;
   // INT{71,3}  ID(auxkey1){71,10}  ;
   // INT{72,3}  ID(auxkey2){72,10}  ;

    PUBLIC{74,6}  BOOLEAN{74,13}  ID(Init){74,17} (INT{74,20}  ID(v_key){74,25} ){
	ID(key){75,4}  = ID(v_key){75,9}  ;
	ID(has_left){76,9}  = FALSE{76,14}  ;
	ID(has_right){77,10}  = FALSE{77,15}  ;
	RETURN{78,7}  TRUE{78,11}  ;
    }

    PUBLIC{81,6}  BOOLEAN{81,13}  ID(SetRight){81,21} (ID(Tree){81,25}  ID(rn){81,27} ){
	ID(right){82,6}  = ID(rn){82,8}  ;
	RETURN{83,7}  TRUE{83,11}  ;
    }

    PUBLIC{86,6}  BOOLEAN{86,13}  ID(SetLeft){86,20} (ID(Tree){86,24}  ID(ln){86,26} ){
	ID(left){87,5}  = ID(ln){87,7}  ;
	RETURN{88,7}  TRUE{88,11}  ;
    }

    PUBLIC{91,6}  ID(Tree){91,10}  ID(GetRight){91,18} (){
	RETURN{92,7}  ID(right){92,12}  ;
    }

    PUBLIC{95,6}  ID(Tree){95,10}  ID(GetLeft){95,17} (){
	RETURN{96,7}  ID(left){96,11} ;
    }

    PUBLIC{99,6}  INT{99,9}  ID(GetKey){99,15} (){
	RETURN{100,7}  ID(key){100,10}  ;
    }

    PUBLIC{103,6}  BOOLEAN{103,13}  ID(SetKey){103,19} (INT{103,22}  ID(v_key){103,27} ){
	ID(key){104,4}  = ID(v_key){104,9}  ;
	RETURN{105,7}  TRUE{105,11}  ;
    }

    PUBLIC{108,6}  BOOLEAN{108,13}  ID(GetHas_Right){108,25} (){
	RETURN{109,7}  ID(has_right){109,16}  ;
    }

    PUBLIC{112,6}  BOOLEAN{112,13}  ID(GetHas_Left){112,24} (){
	RETURN{113,7}  ID(has_left){113,15}  ;
    }

    PUBLIC{116,6}  BOOLEAN{116,13}  ID(SetHas_Left){116,24} (BOOLEAN{116,31}  ID(val){116,34} ){
	 ID(has_left){117,9}  = ID(val){117,12}  ;
	 RETURN{118,7}  TRUE{118,11}  ;
    }

    PUBLIC{121,6}  BOOLEAN{121,13}  ID(SetHas_Right){121,25} (BOOLEAN{121,32}  ID(val){121,35} ){
	 ID(has_right){122,10}  = ID(val){122,13}  ;
	 RETURN{123,7}  TRUE{123,11}  ;
    }

    PUBLIC{126,6}  BOOLEAN{126,13}  ID(Compare){126,20} (INT{126,23}  ID(num1){126,27}  , INT{126,30}  ID(num2){126,34} ){
	BOOLEAN{127,8}  ID(ntb){127,11}  ;
	INT{128,4}  ID(nti){128,7}  ;

	ID(ntb){130,4}  = FALSE{130,9}  ;
	ID(nti){131,4}  = ID(num2){131,8}  + INT(1){131,9}  ;
	IF{132,3}  (ID(num1){132,7}  < ID(num2){132,11} ) ID(ntb){132,14}  = FALSE{132,19}  ;
	ELSE{133,5}  IF{133,7}  (!(ID(num1){133,11}  < ID(nti){133,14} )) ID(ntb){133,17}  = FALSE{133,22}  ;
	ELSE{134,5}  ID(ntb){134,8}  = TRUE{134,12}  ;
	RETURN{135,7}  ID(ntb){135,10}  ;
    }

    PUBLIC{138,6}  BOOLEAN{138,13}  ID(Insert){138,19} (INT{138,22}  ID(v_key){138,27} ){
	ID(Tree){139,5}  ID(new_node){139,13}  ;
	BOOLEAN{140,8}  ID(ntb){140,11}  ;
	ID(Tree){141,5}  ID(current_node){141,17}  ;
	BOOLEAN{142,8}  ID(cont){142,12}  ;
	INT{143,4}  ID(key_aux){143,11}  ;

	ID(new_node){145,9}  = NEW{145,12}  ID(Tree){145,16} ();
	ID(ntb){146,4}  = ID(new_node){146,12} .ID(Init){146,16} (ID(v_key){146,21} ) ;
	ID(current_node){147,13}  = THIS{147,17}  ;
	ID(cont){148,5}  = TRUE{148,9}  ;
	WHILE{149,6}  (ID(cont){149,10} ){
	    ID(key_aux){150,8}  = ID(current_node){150,20} .ID(GetKey){150,26} ();
	    IF{151,3}  (ID(v_key){151,8}  < ID(key_aux){151,15} ){
		IF{152,4}  (ID(current_node){152,16} .ID(GetHas_Left){152,27} ())
		    ID(current_node){153,14}  = ID(current_node){153,26} .ID(GetLeft){153,33} () ;
		ELSE{154,6}  {
		    ID(cont){155,6}  = FALSE{155,11}  ;
		    ID(ntb){156,5}  = ID(current_node){156,17} .ID(SetHas_Left){156,28} (TRUE{156,32} );
		    ID(ntb){157,5}  = ID(current_node){157,17} .ID(SetLeft){157,24} (ID(new_node){157,32} );
		}
	    }
	    ELSE{160,5} {
		IF{161,4}  (ID(current_node){161,16} .ID(GetHas_Right){161,28} ())
		    ID(current_node){162,14}  = ID(current_node){162,26} .ID(GetRight){162,34} () ;
		ELSE{163,6}  {
		    ID(cont){164,6}  = FALSE{164,11}  ;
		    ID(ntb){165,5}  = ID(current_node){165,17} .ID(SetHas_Right){165,29} (TRUE{165,33} );
		    ID(ntb){166,5}  = ID(current_node){166,17} .ID(SetRight){166,25} (ID(new_node){166,33} );
		}
	    }
	}
	RETURN{170,7}  TRUE{170,11}  ;
    }

    PUBLIC{173,6}  BOOLEAN{173,13}  ID(Delete){173,19} (INT{173,22}  ID(v_key){173,27} ){
	ID(Tree){174,5}  ID(current_node){174,17}  ;
	ID(Tree){175,5}  ID(parent_node){175,16}  ;
	BOOLEAN{176,8}  ID(cont){176,12}  ;
	BOOLEAN{177,8}  ID(found){177,13}  ;
	BOOLEAN{178,8}  ID(ntb){178,11}  ;
	BOOLEAN{179,8}  ID(is_root){179,15}  ;
	INT{180,4}  ID(key_aux){180,11}  ;

	ID(current_node){182,13}  = THIS{182,17}  ;
	ID(parent_node){183,12}  = THIS{183,16}  ;
	ID(cont){184,5}  = TRUE{184,9}  ;
	ID(found){185,6}  = FALSE{185,11}  ;
	ID(is_root){186,8}  = TRUE{186,12}  ;
	WHILE{187,6}  (ID(cont){187,10} ){
	    ID(key_aux){188,8}  = ID(current_node){188,20} .ID(GetKey){188,26} ();
	    IF{189,3}  (ID(v_key){189,8}  < ID(key_aux){189,15} )
		IF{190,4}  (ID(current_node){190,16} .ID(GetHas_Left){190,27} ()){
		    ID(parent_node){191,13}  = ID(current_node){191,25}  ;
		    ID(current_node){192,14}  = ID(current_node){192,26} .ID(GetLeft){192,33} () ;
		}
		ELSE{194,6}  ID(cont){194,10}  = FALSE{194,15}  ;
	    ELSE{195,5}  
		IF{196,4}  (ID(key_aux){196,11}  < ID(v_key){196,16} )
		    IF{197,4}  (ID(current_node){197,16} .ID(GetHas_Right){197,28} ()){
			ID(parent_node){198,14}  = ID(current_node){198,26}  ;
			ID(current_node){199,15}  = ID(current_node){199,27} .ID(GetRight){199,35} () ;
		    }
		    ELSE{201,6}  ID(cont){201,10}  = FALSE{201,15}  ;
		ELSE{202,6}  { 
		    IF{203,4}  (ID(is_root){203,11} ) 
			IF{204,5}  (!ID(current_node){204,17} .ID(GetHas_Right){204,29} () && 
			    !ID(current_node){205,15} .ID(GetHas_Left){205,26} () )
			    ID(ntb){206,6}  = TRUE{206,10}  ;
			ELSE{207,7}  
			    ID(ntb){208,6}  = THIS{208,10} .ID(Remove){208,16} (ID(parent_node){208,27} ,ID(current_node){208,39} ); 
		    ELSE{209,6}  ID(ntb){209,9}  = THIS{209,13} .ID(Remove){209,19} (ID(parent_node){209,30} ,ID(current_node){209,42} );
		    ID(found){210,7}  = TRUE{210,11}  ;
		    ID(cont){211,6}  = FALSE{211,11}  ;
		}
	    ID(is_root){213,8}  = FALSE{213,13}  ;
	}
	RETURN{215,7}  ID(found){215,12}  ;
    }

    PUBLIC{218,6}  BOOLEAN{218,13}  ID(Remove){218,19} (ID(Tree){218,23}  ID(p_node){218,29} , ID(Tree){218,33}  ID(c_node){218,39} ){
	BOOLEAN{219,8}  ID(ntb){219,11}  ;
	INT{220,4}  ID(auxkey1){220,11}  ;
	INT{221,4}  ID(auxkey2){221,11}  ;
	
	IF{223,3}  (ID(c_node){223,9} .ID(GetHas_Left){223,20} ()) 
	    ID(ntb){224,4}  = THIS{224,8} .ID(RemoveLeft){224,18} (ID(p_node){224,24} ,ID(c_node){224,30} ) ;
	ELSE{225,5}  
	    IF{226,3}  (ID(c_node){226,9} .ID(GetHas_Right){226,21} ())
		ID(ntb){227,5}  = THIS{227,9} .ID(RemoveRight){227,20} (ID(p_node){227,26} ,ID(c_node){227,32} ) ;
	    ELSE{228,5}  {
		ID(auxkey1){229,9}  = ID(c_node){229,15} .ID(GetKey){229,21} ();
		ID(auxkey2){230,9}  = (ID(p_node){230,15} .ID(GetLeft){230,22} ()).ID(GetKey){230,28} () ;
		IF{231,4}  (THIS{231,8} .ID(Compare){231,15} (ID(auxkey1){231,22} ,ID(auxkey2){231,29} )) {
		    ID(ntb){232,5}  = ID(p_node){232,11} .ID(SetLeft){232,18} (ID(my_null){232,25} );
		    ID(ntb){233,5}  = ID(p_node){233,11} .ID(SetHas_Left){233,22} (FALSE{233,27} );
		}
		ELSE{235,6}  {
		    ID(ntb){236,5}  = ID(p_node){236,11} .ID(SetRight){236,19} (ID(my_null){236,26} );
		    ID(ntb){237,5}  = ID(p_node){237,11} .ID(SetHas_Right){237,23} (FALSE{237,28} );
		}
	    }
	RETURN{240,7}  TRUE{240,11}  ;
    }

    PUBLIC{243,6}  BOOLEAN{243,13}  ID(RemoveRight){243,24} (ID(Tree){243,28}  ID(p_node){243,34} , ID(Tree){243,38}  ID(c_node){243,44} ){
	BOOLEAN{244,8}  ID(ntb){244,11}  ;
	WHILE{245,6}  (ID(c_node){245,12} .ID(GetHas_Right){245,24} ()){
	    ID(ntb){246,4}  = ID(c_node){246,10} .ID(SetKey){246,16} ((ID(c_node){246,22} .ID(GetRight){246,30} ()).ID(GetKey){246,36} ());
	    ID(p_node){247,7}  = ID(c_node){247,13}  ;
	    ID(c_node){248,7}  = ID(c_node){248,13} .ID(GetRight){248,21} () ;
	}
	ID(ntb){250,4}  = ID(p_node){250,10} .ID(SetRight){250,18} (ID(my_null){250,25} );
	ID(ntb){251,4}  = ID(p_node){251,10} .ID(SetHas_Right){251,22} (FALSE{251,27} );
	RETURN{252,7}  TRUE{252,11}  ;
    }

    PUBLIC{255,6}  BOOLEAN{255,13}  ID(RemoveLeft){255,23} (ID(Tree){255,27}  ID(p_node){255,33} , ID(Tree){255,37}  ID(c_node){255,43} ){
	BOOLEAN{256,8}  ID(ntb){256,11}  ;
	WHILE{257,6}  (ID(c_node){257,12} .ID(GetHas_Left){257,23} ()){
	    ID(ntb){258,4}  = ID(c_node){258,10} .ID(SetKey){258,16} ((ID(c_node){258,22} .ID(GetLeft){258,29} ()).ID(GetKey){258,35} ());
	    ID(p_node){259,7}  = ID(c_node){259,13}  ;
	    ID(c_node){260,7}  = ID(c_node){260,13} .ID(GetLeft){260,20} () ;
	}
	ID(ntb){262,4}  = ID(p_node){262,10} .ID(SetLeft){262,17} (ID(my_null){262,24} );
	ID(ntb){263,4}  = ID(p_node){263,10} .ID(SetHas_Left){263,21} (FALSE{263,26} );
	RETURN{264,7}  TRUE{264,11}  ;
    }


    PUBLIC{268,6}  INT{268,9}  ID(Search){268,15} (INT{268,18}  ID(v_key){268,23} ){
	ID(Tree){269,5}  ID(current_node){269,17}  ;
	INT{270,4}  ID(ifound){270,10}  ;
	BOOLEAN{271,8}  ID(cont){271,12}  ;
	INT{272,4}  ID(key_aux){272,11}  ;

	ID(current_node){274,13}  = THIS{274,17}  ;
	ID(cont){275,5}  = TRUE{275,9}  ;
	ID(ifound){276,7}  = INT(0){276,8}  ;
	WHILE{277,6}  (ID(cont){277,10} ){
	    ID(key_aux){278,8}  = ID(current_node){278,20} .ID(GetKey){278,26} ();
	    IF{279,3}  (ID(v_key){279,8}  < ID(key_aux){279,15} )
		IF{280,4}  (ID(current_node){280,16} .ID(GetHas_Left){280,27} ())
		    ID(current_node){281,14}  = ID(current_node){281,26} .ID(GetLeft){281,33} () ;
		ELSE{282,6}  ID(cont){282,10}  = FALSE{282,15}  ;
	    ELSE{283,5}  
		IF{284,4}  (ID(key_aux){284,11}  < ID(v_key){284,16} )
		    IF{285,4}  (ID(current_node){285,16} .ID(GetHas_Right){285,28} ())
			ID(current_node){286,15}  = ID(current_node){286,27} .ID(GetRight){286,35} () ;
		    ELSE{287,6}  ID(cont){287,10}  = FALSE{287,15}  ;
		ELSE{288,6}  { 
		    ID(ifound){289,8}  = INT(1){289,9}  ;
		    ID(cont){290,6}  = FALSE{290,11}  ;
		}
	}
	RETURN{293,7}  ID(ifound){293,13}  ;
    }

    PUBLIC{296,6}  BOOLEAN{296,13}  ID(Print){296,18} (){
	BOOLEAN{297,8}  ID(ntb){297,11}  ;
	ID(Tree){298,5}  ID(current_node){298,17}  ;

	ID(current_node){300,13}  = THIS{300,17}  ;
	ID(ntb){301,4}  = THIS{301,8} .ID(RecPrint){301,16} (ID(current_node){301,28} );
	RETURN{302,7}  TRUE{302,11}  ;
    }

    PUBLIC{305,6}  BOOLEAN{305,13}  ID(RecPrint){305,21} (ID(Tree){305,25}  ID(node){305,29} ){
	BOOLEAN{306,8}  ID(ntb){306,11}  ;

	IF{308,3}  (ID(node){308,7} .ID(GetHas_Left){308,18} ()){
	    ID(ntb){309,4}  = THIS{309,8} .ID(RecPrint){309,16} (ID(node){309,20} .ID(GetLeft){309,27} ());
	} ELSE{310,5}  ID(ntb){310,8}  = TRUE{310,12}  ;
	SYSTEM.OUT.PRINTLN{311,19} (ID(node){311,23} .ID(GetKey){311,29} ());
	IF{312,3}  (ID(node){312,7} .ID(GetHas_Right){312,19} ()){
	    ID(ntb){313,4}  = THIS{313,8} .ID(RecPrint){313,16} (ID(node){313,20} .ID(GetRight){313,28} ());
	} ELSE{314,5}  ID(ntb){314,8}  = TRUE{314,12}  ;
	RETURN{315,7}  TRUE{315,11}  ;
    }
    
    PUBLIC{318,6}  INT{318,9}  ID(accept){318,15} (ID(Visitor){318,22}  ID(v){318,23} ){
	INT{319,4}  ID(nti){319,7}  ;

	SYSTEM.OUT.PRINTLN{321,19} (INT(333){321,22} );
	ID(nti){322,4}  = ID(v){322,5} .ID(visit){322,10} (THIS{322,14} ) ;
	RETURN{323,7}  INT(0){323,8}  ;
    }

}

  

CLASS{330,5}  ID(Visitor){330,12}  {
    ID(Tree){331,4}  ID(l){331,5}  ;
    ID(Tree){332,4}  ID(r){332,5}  ;

    PUBLIC{334,6}  INT{334,9}  ID(visit){334,14} (ID(Tree){334,18}  ID(n){334,19} ){
	INT{335,4}  ID(nti){335,7}  ;

	IF{337,3}  (ID(n){337,4} .ID(GetHas_Right){337,16} ()){
	    ID(r){338,2}  = ID(n){338,3} .ID(GetRight){338,11} () ;
	    ID(nti){339,4}  = ID(r){339,5} .ID(accept){339,11} (THIS{339,15} ) ; }
	ELSE{340,5}  ID(nti){340,8}  = INT(0){340,9}  ;

	IF{342,3}  (ID(n){342,4} .ID(GetHas_Left){342,15} ()) {
	    ID(l){343,2}  = ID(n){343,3} .ID(GetLeft){343,10} (); 
	    ID(nti){344,4}  = ID(l){344,5} .ID(accept){344,11} (THIS{344,15} ) ; }
	ELSE{345,5}  ID(nti){345,8}  = INT(0){345,9}  ;

	RETURN{347,7}  INT(0){347,8} ;
    }

}


CLASS{353,5}  ID(MyVisitor){353,14}  EXTENDS{353,21}  ID(Visitor){353,28}  {

    PUBLIC{355,6}  INT{355,9}  ID(visit){355,14} (ID(Tree){355,18}  ID(n){355,19} ){
	INT{356,4}  ID(nti){356,7}  ;

	IF{358,3}  (ID(n){358,4} .ID(GetHas_Right){358,16} ()){
	    ID(r){359,2}  = ID(n){359,3} .ID(GetRight){359,11} () ;
	    ID(nti){360,4}  = ID(r){360,5} .ID(accept){360,11} (THIS{360,15} ) ; }
	ELSE{361,5}  ID(nti){361,8}  = INT(0){361,9}  ;

	SYSTEM.OUT.PRINTLN{363,19} (ID(n){363,20} .ID(GetKey){363,26} ());

	IF{365,3}  (ID(n){365,4} .ID(GetHas_Left){365,15} ()) {
	    ID(l){366,2}  = ID(n){366,3} .ID(GetLeft){366,10} (); 
	    ID(nti){367,4}  =ID(l){367,5} .ID(accept){367,11} (THIS{367,15} ) ; }
	ELSE{368,5}  ID(nti){368,8}  = INT(0){368,9}  ;

	RETURN{370,7}  INT(0){370,8} ;
    }

}
