CLASS{0,5}  ID(BinaryTree){0,15} {
    PUBLIC{1,6}  STATIC{1,12}  VOID{1,16}  MAIN{1,20} (STRING{1,26} [] ID(a){1,27} ){
	SYSTEM.OUT.PRINTLN{2,19} (NEW{2,22}  ID(BT){2,24} ().ID(Start){2,29} ());
    }
}


// ID(This){7,4}  CLASS{7,9}  ID(invokes){7,16}  ID(the){7,19}  ID(methods){7,26}  ID(to){7,28}  ID(create){7,34}  ID(a){7,35}  ID(tree){7,39} ,
// ID(insert){8,6} , ID(delete){8,12}  ID(and){8,15}  ID(serach){8,21}  ID(for){8,24}   ID(elements){8,32}  ID(on){8,34}  ID(it){8,36} 
CLASS{9,5}  ID(BT){9,7}  {

    PUBLIC{11,6}  INT{11,9}  ID(Start){11,14} (){
	ID(Tree){12,5}  ID(root){12,9}  ;
	BOOLEAN{13,8}  ID(ntb){13,11}  ;
	INT{14,4}  ID(nti){14,7}  ;

	ID(root){16,5}  = NEW{16,8}  ID(Tree){16,12} ();
	ID(ntb){17,4}  = ID(root){17,8} .ID(Init){17,12} (INT(16){17,14} );
	ID(ntb){18,4}  = ID(root){18,8} .ID(Print){18,13} ();
	SYSTEM.OUT.PRINTLN{19,19} (INT(100000000){19,28} );
	ID(ntb){20,4}  = ID(root){20,8} .ID(Insert){20,14} (INT(8){20,15} ) ;
	ID(ntb){21,4}  = ID(root){21,8} .ID(Print){21,13} ();
	ID(ntb){22,4}  = ID(root){22,8} .ID(Insert){22,14} (INT(24){22,16} ) ;
	ID(ntb){23,4}  = ID(root){23,8} .ID(Insert){23,14} (INT(4){23,15} ) ;
	ID(ntb){24,4}  = ID(root){24,8} .ID(Insert){24,14} (INT(12){24,16} ) ;
	ID(ntb){25,4}  = ID(root){25,8} .ID(Insert){25,14} (INT(20){25,16} ) ;
	ID(ntb){26,4}  = ID(root){26,8} .ID(Insert){26,14} (INT(28){26,16} ) ;
	ID(ntb){27,4}  = ID(root){27,8} .ID(Insert){27,14} (INT(14){27,16} ) ;
	ID(ntb){28,4}  = ID(root){28,8} .ID(Print){28,13} ();
	SYSTEM.OUT.PRINTLN{29,19} (ID(root){29,23} .ID(Search){29,29} (INT(24){29,31} ));
	SYSTEM.OUT.PRINTLN{30,19} (ID(root){30,23} .ID(Search){30,29} (INT(12){30,31} ));
	SYSTEM.OUT.PRINTLN{31,19} (ID(root){31,23} .ID(Search){31,29} (INT(16){31,31} ));
	SYSTEM.OUT.PRINTLN{32,19} (ID(root){32,23} .ID(Search){32,29} (INT(50){32,31} ));
	SYSTEM.OUT.PRINTLN{33,19} (ID(root){33,23} .ID(Search){33,29} (INT(12){33,31} ));
	ID(ntb){34,4}  = ID(root){34,8} .ID(Delete){34,14} (INT(12){34,16} );
	ID(ntb){35,4}  = ID(root){35,8} .ID(Print){35,13} ();
	SYSTEM.OUT.PRINTLN{36,19} (ID(root){36,23} .ID(Search){36,29} (INT(12){36,31} ));

	RETURN{38,7}  INT(0){38,8}  ;
    }

}

CLASS{43,5}  ID(Tree){43,9} {
    ID(Tree){44,4}  ID(left){44,8}  ;
    ID(Tree){45,4}  ID(right){45,9} ;
    INT{46,3}  ID(key){46,6}  ;
    BOOLEAN{47,7}  ID(has_left){47,15}  ;
    BOOLEAN{48,7}  ID(has_right){48,16}  ;
    ID(Tree){49,4}  ID(my_null){49,11}  ;

    // ID(Initialize){51,10}  ID(a){51,11}  ID(node){51,15}  ID(with){51,19}  ID(a){51,20}  ID(key){51,23}  ID(value){51,28}  ID(and){51,31}  ID(no){51,33}  ID(children){51,41} 
    PUBLIC{52,6}  BOOLEAN{52,13}  ID(Init){52,17} (INT{52,20}  ID(v_key){52,25} ){
	ID(key){53,4}  = ID(v_key){53,9}  ;
	ID(has_left){54,9}  = FALSE{54,14}  ;
	ID(has_right){55,10}  = FALSE{55,15}  ;
	RETURN{56,7}  TRUE{56,11}  ;
    }

    // ID(Update){59,6}  ID(the){59,9}  ID(right){59,14}  ID(child){59,19}  ID(with){59,23}  ID(rn){59,25} 
    PUBLIC{60,6}  BOOLEAN{60,13}  ID(SetRight){60,21} (ID(Tree){60,25}  ID(rn){60,27} ){
	ID(right){61,6}  = ID(rn){61,8}  ;
	RETURN{62,7}  TRUE{62,11}  ;
    }
    
    // ID(Update){65,6}  ID(the){65,9}  ID(left){65,13}  ID(child){65,18}  ID(with){65,22}  ID(ln){65,24} 
    PUBLIC{66,6}  BOOLEAN{66,13}  ID(SetLeft){66,20} (ID(Tree){66,24}  ID(ln){66,26} ){
	ID(left){67,5}  = ID(ln){67,7}  ;
	RETURN{68,7}  TRUE{68,11}  ;
    }

    PUBLIC{71,6}  ID(Tree){71,10}  ID(GetRight){71,18} (){
	RETURN{72,7}  ID(right){72,12}  ;
    }

    PUBLIC{75,6}  ID(Tree){75,10}  ID(GetLeft){75,17} (){
	RETURN{76,7}  ID(left){76,11} ;
    }

    PUBLIC{79,6}  INT{79,9}  ID(GetKey){79,15} (){
	RETURN{80,7}  ID(key){80,10}  ;
    }

    PUBLIC{83,6}  BOOLEAN{83,13}  ID(SetKey){83,19} (INT{83,22}  ID(v_key){83,27} ){
	ID(key){84,4}  = ID(v_key){84,9}  ;
	RETURN{85,7}  TRUE{85,11}  ;
    }

    PUBLIC{88,6}  BOOLEAN{88,13}  ID(GetHas_Right){88,25} (){
	RETURN{89,7}  ID(has_right){89,16}  ;
    }

    PUBLIC{92,6}  BOOLEAN{92,13}  ID(GetHas_Left){92,24} (){
	RETURN{93,7}  ID(has_left){93,15}  ;
    }

    PUBLIC{96,6}  BOOLEAN{96,13}  ID(SetHas_Left){96,24} (BOOLEAN{96,31}  ID(val){96,34} ){
	 ID(has_left){97,9}  = ID(val){97,12}  ;
	 RETURN{98,7}  TRUE{98,11}  ;
    }

    PUBLIC{101,6}  BOOLEAN{101,13}  ID(SetHas_Right){101,25} (BOOLEAN{101,32}  ID(val){101,35} ){
	 ID(has_right){102,10}  = ID(val){102,13}  ;
	 RETURN{103,7}  TRUE{103,11}  ;
    }
    
    // ID(This){106,4}  ID(method){106,10}  ID(compares){106,18}  ID(two){106,21}  ID(integers){106,29}  ID(and){106,32} 
    // ID(returns){107,7}  TRUE{107,11}  IF{107,13}  ID(they){107,17}  ID(are){107,20}  ID(equal){107,25}  ID(and){107,28}  FALSE{107,33} 
    // ID(otherwise){108,9} 
    PUBLIC{109,6}  BOOLEAN{109,13}  ID(Compare){109,20} (INT{109,23}  ID(num1){109,27}  , INT{109,30}  ID(num2){109,34} ){
	BOOLEAN{110,8}  ID(ntb){110,11}  ;
	INT{111,4}  ID(nti){111,7}  ;

	ID(ntb){113,4}  = FALSE{113,9}  ;
	ID(nti){114,4}  = ID(num2){114,8}  + INT(1){114,9}  ;
	IF{115,3}  (ID(num1){115,7}  < ID(num2){115,11} ) ID(ntb){115,14}  = FALSE{115,19}  ;
	ELSE{116,5}  IF{116,7}  (!(ID(num1){116,11}  < ID(nti){116,14} )) ID(ntb){116,17}  = FALSE{116,22}  ;
	ELSE{117,5}  ID(ntb){117,8}  = TRUE{117,12}  ;
	RETURN{118,7}  ID(ntb){118,10}  ;
    }


    // ID(Insert){122,6}  ID(a){122,7}  NEW{122,10}  ID(element){122,17}  ID(in){122,19}  ID(the){122,22}  ID(tree){122,26} 
    PUBLIC{123,6}  BOOLEAN{123,13}  ID(Insert){123,19} (INT{123,22}  ID(v_key){123,27} ){
	ID(Tree){124,5}  ID(new_node){124,13}  ;
	BOOLEAN{125,8}  ID(ntb){125,11}  ;
	BOOLEAN{126,8}  ID(cont){126,12}  ;
	INT{127,4}  ID(key_aux){127,11}  ;
	ID(Tree){128,5}  ID(current_node){128,17}  ;

	ID(new_node){130,9}  = NEW{130,12}  ID(Tree){130,16} ();
	ID(ntb){131,4}  = ID(new_node){131,12} .ID(Init){131,16} (ID(v_key){131,21} ) ;
	ID(current_node){132,13}  = THIS{132,17}  ;
	ID(cont){133,5}  = TRUE{133,9}  ;
	WHILE{134,6}  (ID(cont){134,10} ){
	    ID(key_aux){135,8}  = ID(current_node){135,20} .ID(GetKey){135,26} ();
	    IF{136,3}  (ID(v_key){136,8}  < ID(key_aux){136,15} ){
		IF{137,4}  (ID(current_node){137,16} .ID(GetHas_Left){137,27} ())
		    ID(current_node){138,14}  = ID(current_node){138,26} .ID(GetLeft){138,33} () ;
		ELSE{139,6}  {
		    ID(cont){140,6}  = FALSE{140,11}  ;
		    ID(ntb){141,5}  = ID(current_node){141,17} .ID(SetHas_Left){141,28} (TRUE{141,32} );
		    ID(ntb){142,5}  = ID(current_node){142,17} .ID(SetLeft){142,24} (ID(new_node){142,32} );
		}
	    }
	    ELSE{145,5} {
		IF{146,4}  (ID(current_node){146,16} .ID(GetHas_Right){146,28} ())
		    ID(current_node){147,14}  = ID(current_node){147,26} .ID(GetRight){147,34} () ;
		ELSE{148,6}  {
		    ID(cont){149,6}  = FALSE{149,11}  ;
		    ID(ntb){150,5}  = ID(current_node){150,17} .ID(SetHas_Right){150,29} (TRUE{150,33} );
		    ID(ntb){151,5}  = ID(current_node){151,17} .ID(SetRight){151,25} (ID(new_node){151,33} );
		}
	    }
	}
	RETURN{155,7}  TRUE{155,11}  ;
    }


    // ID(Delete){159,6}  ID(an){159,8}  ID(element){159,15}  ID(from){159,19}  ID(the){159,22}  ID(tree){159,26} 
    PUBLIC{160,6}  BOOLEAN{160,13}  ID(Delete){160,19} (INT{160,22}  ID(v_key){160,27} ){
	ID(Tree){161,5}  ID(current_node){161,17}  ;
	ID(Tree){162,5}  ID(parent_node){162,16}  ;
	BOOLEAN{163,8}  ID(cont){163,12}  ;
	BOOLEAN{164,8}  ID(found){164,13}  ;
	BOOLEAN{165,8}  ID(is_root){165,15}  ;
	INT{166,4}  ID(key_aux){166,11}  ;
	BOOLEAN{167,8}  ID(ntb){167,11}  ;

	ID(current_node){169,13}  = THIS{169,17}  ;
	ID(parent_node){170,12}  = THIS{170,16}  ;
	ID(cont){171,5}  = TRUE{171,9}  ;
	ID(found){172,6}  = FALSE{172,11}  ;
	ID(is_root){173,8}  = TRUE{173,12}  ;
	WHILE{174,6}  (ID(cont){174,10} ){
	    ID(key_aux){175,8}  = ID(current_node){175,20} .ID(GetKey){175,26} ();
	    IF{176,3}  (ID(v_key){176,8}  < ID(key_aux){176,15} )
		IF{177,4}  (ID(current_node){177,16} .ID(GetHas_Left){177,27} ()){
		    ID(parent_node){178,13}  = ID(current_node){178,25}  ;
		    ID(current_node){179,14}  = ID(current_node){179,26} .ID(GetLeft){179,33} () ;
		}
		ELSE{181,6}  ID(cont){181,10}  = FALSE{181,15}  ;
	    ELSE{182,5}  
		IF{183,4}  (ID(key_aux){183,11}  < ID(v_key){183,16} )
		    IF{184,4}  (ID(current_node){184,16} .ID(GetHas_Right){184,28} ()){
			ID(parent_node){185,14}  = ID(current_node){185,26}  ;
			ID(current_node){186,15}  = ID(current_node){186,27} .ID(GetRight){186,35} () ;
		    }
		    ELSE{188,6}  ID(cont){188,10}  = FALSE{188,15}  ;
		ELSE{189,6}  { 
		    IF{190,4}  (ID(is_root){190,11} ) 
			IF{191,5}  ((!ID(current_node){191,17} .ID(GetHas_Right){191,29} ()) && 
			    (!ID(current_node){192,15} .ID(GetHas_Left){192,26} ()) )
			    ID(ntb){193,6}  = TRUE{193,10}  ;
			ELSE{194,7}  
			    ID(ntb){195,6}  = THIS{195,10} .ID(Remove){195,16} (ID(parent_node){195,27} ,ID(current_node){195,39} ); 
		    ELSE{196,6}  ID(ntb){196,9}  = THIS{196,13} .ID(Remove){196,19} (ID(parent_node){196,30} ,ID(current_node){196,42} );
		    ID(found){197,7}  = TRUE{197,11}  ;
		    ID(cont){198,6}  = FALSE{198,11}  ;
		}
	    ID(is_root){200,8}  = FALSE{200,13}  ;
	}
	RETURN{202,7}  ID(found){202,12}  ;
    }


    // ID(Check){206,5}  IF{206,7}  ID(the){206,10}  ID(element){206,17}  ID(to){206,19}  ID(be){206,21}  ID(removed){206,28}  ID(will){206,32}  ID(use){206,35}  ID(the){206,38} 
    // ID(righ){207,4}  ID(or){207,6}  ID(left){207,10}  ID(subtree){207,17}  IF{207,19}  ID(one){207,22}  ID(exists){207,28} 
    PUBLIC{208,6}  BOOLEAN{208,13}  ID(Remove){208,19} (ID(Tree){208,23}  ID(p_node){208,29} , ID(Tree){208,33}  ID(c_node){208,39} ){
	BOOLEAN{209,8}  ID(ntb){209,11}  ;
	INT{210,4}  ID(auxkey1){210,11}  ;
	INT{211,4}  ID(auxkey2){211,11}  ;
	
	IF{213,3}  (ID(c_node){213,9} .ID(GetHas_Left){213,20} ()) 
	    ID(ntb){214,4}  = THIS{214,8} .ID(RemoveLeft){214,18} (ID(p_node){214,24} ,ID(c_node){214,30} ) ;
	ELSE{215,5}  
	    IF{216,3}  (ID(c_node){216,9} .ID(GetHas_Right){216,21} ())
		ID(ntb){217,5}  = THIS{217,9} .ID(RemoveRight){217,20} (ID(p_node){217,26} ,ID(c_node){217,32} ) ;
	    ELSE{218,5}  {
		ID(auxkey1){219,9}  = ID(c_node){219,15} .ID(GetKey){219,21} ();
		//ID(auxtree01){220,11}  = ID(p_node){220,17} .ID(GetLeft){220,24} () ;
		//ID(auxkey2){221,9}  = ID(auxtree01){221,18} .ID(GetKey){221,24} () ;
		ID(auxkey2){222,9}  = (ID(p_node){222,15} .ID(GetLeft){222,22} ()).ID(GetKey){222,28} () ;
		IF{223,4}  (THIS{223,8} .ID(Compare){223,15} (ID(auxkey1){223,22} ,ID(auxkey2){223,29} )) {
		    ID(ntb){224,5}  = ID(p_node){224,11} .ID(SetLeft){224,18} (ID(my_null){224,25} );
		    ID(ntb){225,5}  = ID(p_node){225,11} .ID(SetHas_Left){225,22} (FALSE{225,27} );
		}
		ELSE{227,6}  {
		    ID(ntb){228,5}  = ID(p_node){228,11} .ID(SetRight){228,19} (ID(my_null){228,26} );
		    ID(ntb){229,5}  = ID(p_node){229,11} .ID(SetHas_Right){229,23} (FALSE{229,28} );
		}
	    }
	RETURN{232,7}  TRUE{232,11}  ;
    }


    // ID(Copy){236,4}  ID(the){236,7}  ID(child){236,12}  ID(key){236,15}  ID(to){236,17}  ID(the){236,20}  ID(parent){236,26}  ID(until){236,31}  ID(a){236,32}  ID(leaf){236,36}  ID(is){236,38} 
    // ID(found){237,5}  ID(and){237,8}  ID(remove){237,14}  ID(the){237,17}  ID(leaf){237,21} . ID(This){237,25}  ID(is){237,27}  ID(done){237,31}  ID(with){237,35}  ID(the){237,38} 
    // ID(right){238,5}  ID(subtree){238,12} 
    PUBLIC{239,6}  BOOLEAN{239,13}  ID(RemoveRight){239,24} (ID(Tree){239,28}  ID(p_node){239,34} , ID(Tree){239,38}  ID(c_node){239,44} ){
	BOOLEAN{240,8}  ID(ntb){240,11}  ;

	WHILE{242,6}  (ID(c_node){242,12} .ID(GetHas_Right){242,24} ()){
	    //ID(auxtree01){243,10}  = ID(c_node){243,16} .ID(GetRight){243,24} () ;
	    //ID(auxint02){244,9}  = ID(auxtree01){244,18} .ID(GetKey){244,24} ();
	    //ID(ntb){245,4}  = ID(c_node){245,10} .ID(SetKey){245,16} (ID(auxint02){245,24} );
	    ID(ntb){246,4}  = ID(c_node){246,10} .ID(SetKey){246,16} ((ID(c_node){246,22} .ID(GetRight){246,30} ()).ID(GetKey){246,36} ());
	    ID(p_node){247,7}  = ID(c_node){247,13}  ;
	    ID(c_node){248,7}  = ID(c_node){248,13} .ID(GetRight){248,21} () ;
	}
	ID(ntb){250,4}  = ID(p_node){250,10} .ID(SetRight){250,18} (ID(my_null){250,25} );
	ID(ntb){251,4}  = ID(p_node){251,10} .ID(SetHas_Right){251,22} (FALSE{251,27} );
	RETURN{252,7}  TRUE{252,11}  ;
    }


    // ID(Copy){256,4}  ID(the){256,7}  ID(child){256,12}  ID(key){256,15}  ID(to){256,17}  ID(the){256,20}  ID(parent){256,26}  ID(until){256,31}  ID(a){256,32}  ID(leaf){256,36}  ID(is){256,38} 
    // ID(found){257,5}  ID(and){257,8}  ID(remove){257,14}  ID(the){257,17}  ID(leaf){257,21} . ID(This){257,25}  ID(is){257,27}  ID(done){257,31}  ID(with){257,35}  ID(the){257,38} 
    // ID(left){258,4}  ID(subtree){258,11} 
    PUBLIC{259,6}  BOOLEAN{259,13}  ID(RemoveLeft){259,23} (ID(Tree){259,27}  ID(p_node){259,33} , ID(Tree){259,37}  ID(c_node){259,43} ){
	BOOLEAN{260,8}  ID(ntb){260,11}  ;

	WHILE{262,6}  (ID(c_node){262,12} .ID(GetHas_Left){262,23} ()){
	    //ID(auxtree01){263,10}  = ID(c_node){263,16} .ID(GetLeft){263,23} () ;
	    //ID(auxint02){264,9}  = ID(auxtree01){264,18} .ID(GetKey){264,24} ();
	    //ID(ntb){265,4}  = ID(c_node){265,10} .ID(SetKey){265,16} (ID(auxint02){265,24} );
	    ID(ntb){266,4}  = ID(c_node){266,10} .ID(SetKey){266,16} ((ID(c_node){266,22} .ID(GetLeft){266,29} ()).ID(GetKey){266,35} ());
	    ID(p_node){267,7}  = ID(c_node){267,13}  ;
	    ID(c_node){268,7}  = ID(c_node){268,13} .ID(GetLeft){268,20} () ;
	}
	ID(ntb){270,4}  = ID(p_node){270,10} .ID(SetLeft){270,17} (ID(my_null){270,24} );
	ID(ntb){271,4}  = ID(p_node){271,10} .ID(SetHas_Left){271,21} (FALSE{271,26} );
	RETURN{272,7}  TRUE{272,11}  ;
    }

    // ID(Search){275,6}  ID(for){275,9}  ID(an){275,11}  ID(elemnt){275,17}  ID(in){275,19}  ID(the){275,22}  ID(tree){275,26} 
    PUBLIC{276,6}  INT{276,9}  ID(Search){276,15} (INT{276,18}  ID(v_key){276,23} ){
	BOOLEAN{277,8}  ID(cont){277,12}  ;
	INT{278,4}  ID(ifound){278,10}  ;
	ID(Tree){279,5}  ID(current_node){279,17} ;
	INT{280,4}  ID(key_aux){280,11}  ;

	ID(current_node){282,13}  = THIS{282,17}  ;
	ID(cont){283,5}  = TRUE{283,9}  ;
	ID(ifound){284,7}  = INT(0){284,8}  ;
	WHILE{285,6}  (ID(cont){285,10} ){
	    ID(key_aux){286,8}  = ID(current_node){286,20} .ID(GetKey){286,26} ();
	    IF{287,3}  (ID(v_key){287,8}  < ID(key_aux){287,15} )
		IF{288,4}  (ID(current_node){288,16} .ID(GetHas_Left){288,27} ())
		    ID(current_node){289,14}  = ID(current_node){289,26} .ID(GetLeft){289,33} () ;
		ELSE{290,6}  ID(cont){290,10}  = FALSE{290,15}  ;
	    ELSE{291,5}  
		IF{292,4}  (ID(key_aux){292,11}  < ID(v_key){292,16} )
		    IF{293,4}  (ID(current_node){293,16} .ID(GetHas_Right){293,28} ())
			ID(current_node){294,15}  = ID(current_node){294,27} .ID(GetRight){294,35} () ;
		    ELSE{295,6}  ID(cont){295,10}  = FALSE{295,15}  ;
		ELSE{296,6}  { 
		    ID(ifound){297,8}  = INT(1){297,9}  ;
		    ID(cont){298,6}  = FALSE{298,11}  ;
		}
	}
	RETURN{301,7}  ID(ifound){301,13}  ;
    }

    // ID(Invoke){304,6}  ID(the){304,9}  ID(method){304,15}  ID(to){304,17}  ID(really){304,23}  ID(print){304,28}  ID(the){304,31}  ID(tree){304,35}  ID(elements){304,43} 
    PUBLIC{305,6}  BOOLEAN{305,13}  ID(Print){305,18} (){
	ID(Tree){306,5}  ID(current_node){306,17} ;
	BOOLEAN{307,8}  ID(ntb){307,11}  ;

	ID(current_node){309,13}  = THIS{309,17}  ;
	ID(ntb){310,4}  = THIS{310,8} .ID(RecPrint){310,16} (ID(current_node){310,28} );
	RETURN{311,7}  TRUE{311,11}  ;
    }

    // ID(Print){314,5}  ID(the){314,8}  ID(elements){314,16}  ID(of){314,18}  ID(the){314,21}  ID(tree){314,25} 
    PUBLIC{315,6}  BOOLEAN{315,13}  ID(RecPrint){315,21} (ID(Tree){315,25}  ID(node){315,29} ){
	BOOLEAN{316,8}  ID(ntb){316,11}  ;

	IF{318,3}  (ID(node){318,7} .ID(GetHas_Left){318,18} ()){
	    //ID(auxtree01){319,10}  = ID(node){319,14} .ID(GetLeft){319,21} () ;
	    //ID(ntb){320,4}  = THIS{320,8} .ID(RecPrint){320,16} (ID(auxtree01){320,25} );
	    ID(ntb){321,4}  = THIS{321,8} .ID(RecPrint){321,16} (ID(node){321,20} .ID(GetLeft){321,27} ());
	} ELSE{322,5}  ID(ntb){322,8}  = TRUE{322,12}  ;
	SYSTEM.OUT.PRINTLN{323,19} (ID(node){323,23} .ID(GetKey){323,29} ());
	IF{324,3}  (ID(node){324,7} .ID(GetHas_Right){324,19} ()){
	    //ID(auxtree01){325,10}  = ID(node){325,14} .ID(GetRight){325,22} () ;
	    //ID(ntb){326,4}  = THIS{326,8} .ID(RecPrint){326,16} (ID(auxtree01){326,25} );
	    ID(ntb){327,4}  = THIS{327,8} .ID(RecPrint){327,16} (ID(node){327,20} .ID(GetRight){327,28} ());
	} ELSE{328,5}  ID(ntb){328,8}  = TRUE{328,12}  ;
	RETURN{329,7}  TRUE{329,11}  ;
    }

}
   
